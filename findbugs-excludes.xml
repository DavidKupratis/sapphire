<FindBugsFilter>
    
    <!--
        Code generated by JavaCC.
    -->
    
    <Match>
        <Package name="org.eclipse.sapphire.modeling.docsys.internal"/>
    </Match>
    
    <Match>
        <Package name="org.eclipse.sapphire.modeling.el.parser.internal"/>
    </Match>
    
    <Match>
        <Package name="org.eclipse.sapphire.modeling.xml.dtd.internal"/>
    </Match>
    
    <!--
        A mutable static field could be changed by malicious code or by accident from another package. The field could be made final
        to avoid this vulnerability.
        
        IGNORE: NLS resource loading requires this pattern.
    -->
    
    <Match>
        <Class name="~org\.eclipse\.sapphire.*\$Resources"/>
        <Bug pattern="MS_SHOULD_BE_FINAL"/>
    </Match>

    <!--
        This Serializable class defines a non-primitive instance field which is neither transient, Serializable, or java.lang.Object,
        and does not appear to implement the Externalizable interface or the readObject() and writeObject() methods.  Objects of this
        class will not be deserialized correctly if a non-Serializable object is stored in this field.
        
        IGNORE: Sapphire doesn't support Java serialization.
    -->
         
    <Match>
        <Class name="org.eclipse.sapphire.modeling.StatusException"/>
        <Bug pattern="SE_BAD_FIELD"/>
    </Match>
    
    <Match>
        <Class name="org.eclipse.sapphire.modeling.el.FunctionException"/>
        <Bug pattern="SE_BAD_FIELD"/>
    </Match>
    
    <!--
        This class implements the Comparator interface. You should consider whether or not it should also implement the Serializable
        interface. If a comparator is used to construct an ordered collection such as a TreeMap, then the TreeMap will be serializable
        only if the comparator is also serializable. As most comparators have little or no state, making them serializable is generally
        easy and good defensive programming.
        
        IGNORE: Sapphire doesn't support Java serialization.
    -->
    
    <Match>
        <Bug pattern="SE_COMPARATOR_SHOULD_BE_SERIALIZABLE"/>
    </Match>

    <!--
        Calling this.getClass().getResource(...) could give results other than expected if this class is extended by a class in
        another package.
        
        IGNORE: SapphireTestCase.loadResourceAsStream( String ) method is specifically written to take advantage of this effect.
    -->

    <Match>
        <Class name="org.eclipse.sapphire.tests.SapphireTestCase"/>
        <Bug pattern="UI_INHERITANCE_UNSAFE_GETRESOURCE"/>
    </Match>
    
    
</FindBugsFilter>
