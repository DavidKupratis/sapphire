<FindBugsFilter>
    
    <!--
        Code generated by JavaCC.
    -->
    
    <Match>
        <Package name="org.eclipse.sapphire.modeling.docsys.internal"/>
    </Match>
    
    <Match>
        <Package name="org.eclipse.sapphire.modeling.el.parser.internal"/>
    </Match>
    
    <Match>
        <Package name="org.eclipse.sapphire.modeling.xml.dtd.internal"/>
    </Match>
    
    <!--
        A mutable static field could be changed by malicious code or by accident from another package. The field could be made final
        to avoid this vulnerability.
        
        IGNORE: LocalizedTest resource loading requires this pattern.
    -->
    
    <Match>
        <Bug pattern="MS_SHOULD_BE_FINAL"/>
    </Match>

    <!--
        This Serializable class defines a non-primitive instance field which is neither transient, Serializable, or java.lang.Object,
        and does not appear to implement the Externalizable interface or the readObject() and writeObject() methods.  Objects of this
        class will not be deserialized correctly if a non-Serializable object is stored in this field.
        
        IGNORE: Sapphire doesn't support Java serialization.
    -->
         
    <Match>
        <Class name="org.eclipse.sapphire.modeling.StatusException"/>
        <Bug pattern="SE_BAD_FIELD"/>
    </Match>
    
    <Match>
        <Class name="org.eclipse.sapphire.modeling.el.FunctionException"/>
        <Bug pattern="SE_BAD_FIELD"/>
    </Match>
    
    <!--
        This class implements the Comparator interface. You should consider whether or not it should also implement the Serializable
        interface. If a comparator is used to construct an ordered collection such as a TreeMap, then the TreeMap will be serializable
        only if the comparator is also serializable. As most comparators have little or no state, making them serializable is generally
        easy and good defensive programming.
        
        IGNORE: Sapphire doesn't support Java serialization.
    -->
    
    <Match>
        <Bug pattern="SE_COMPARATOR_SHOULD_BE_SERIALIZABLE"/>
    </Match>

    <!--
        Calling this.getClass().getResource(...) could give results other than expected if this class is extended by a class in
        another package.
        
        IGNORE: SapphireTestCase.loadResourceAsStream( String ) method is specifically written to take advantage of this effect.
    -->

    <Match>
        <Class name="org.eclipse.sapphire.tests.SapphireTestCase"/>
        <Bug pattern="UI_INHERITANCE_UNSAFE_GETRESOURCE"/>
    </Match>
    
    <!--
        The method creates an IO stream object, does not assign it to any fields, pass it to other methods that might
        close it, or return it, and does not appear to close the stream on all paths out of the method. This may result
        in a file descriptor leak. It is generally a good idea to use a finally block to ensure that streams are closed.
        
        IGNORE: Reported on BufferedReader even if underlying stream is properly closed. https://sourceforge.net/p/findbugs/bugs/786/
    -->
    
    <Match>
        <Bug pattern="OS_OPEN_STREAM "/>
    </Match>
    
    <!--
        This method contains a switch statement where default case is missing. Usually you need to provide a default case. 
        
        IGNORE: The no default case occurs regularly when writing event handlers.
    -->
    
    <Match>
        <Bug pattern="SF_SWITCH_NO_DEFAULT "/>
    </Match>
    
    <!--
        This field is never read. Consider removing it from the class.
        
        IGNORE: In this particular case, the field is used to keep GC from reclaiming and finalizing the referenced object.
    -->
    
    <Match>
        <Class name="org.eclipse.sapphire.ui.def.DefinitionLoader$Reference"/>
        <Bug pattern="URF_UNREAD_FIELD "/>
    </Match>
    
    <!--
        The fields of this class appear to be accessed inconsistently with respect to synchronization.
        
        IGNORE: This detector produces many false positives, especially for complex synchronization scenarios. 
    -->
    
    <Match>
        <Bug pattern="IS2_INCONSISTENT_SYNC "/>
    </Match>

    <!--
        Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.
        
        IGNORE: Not interested in style checking. 
    -->
    
    <Match>
        <Bug pattern="NM_METHOD_NAMING_CONVENTION "/>
    </Match>

</FindBugsFilter>
