<?xml version="1.0" encoding="UTF-8"?>

<!-- 
 ******************************************************************************
 * Copyright (c) 2011 Oracle
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Konstantin Komissarchik - initial implementation and ongoing maintenance
 ******************************************************************************
-->

<extension xmlns="http://www.eclipse.org/sapphire/xmlns/extension">
    <model-property-service>
        <type>org.eclipse.sapphire.modeling.EnablementService</type>
        <factory>org.eclipse.sapphire.modeling.internal.EnablementServiceFactory</factory>
    </model-property-service>
    <model-property-service>
        <type>org.eclipse.sapphire.modeling.serialization.ValueSerializationService</type>
        <factory>org.eclipse.sapphire.modeling.serialization.internal.ValueSerializationServiceFactory</factory>
    </model-property-service>
    <model-property-service>
        <type>org.eclipse.sapphire.modeling.DefaultValueService</type>
        <factory>org.eclipse.sapphire.modeling.internal.DefaultValueServiceFactory</factory>
    </model-property-service>
    <model-property-service>
        <type>org.eclipse.sapphire.modeling.DerivedValueService</type>
        <factory>org.eclipse.sapphire.modeling.internal.DerivedValueServiceFactory</factory>
    </model-property-service>
    <model-property-service>
        <type>org.eclipse.sapphire.modeling.PossibleValuesService</type>
        <factory>org.eclipse.sapphire.modeling.internal.PossibleValuesServiceFactory</factory>
    </model-property-service>
    <model-property-service>
        <type>org.eclipse.sapphire.modeling.ReferenceService</type>
        <factory>org.eclipse.sapphire.modeling.internal.ReferenceServiceFactory</factory>
    </model-property-service>
    <model-property-service>
        <type>org.eclipse.sapphire.modeling.ReferenceService</type>
        <factory>org.eclipse.sapphire.modeling.internal.ClassReferenceServiceFactory</factory>
    </model-property-service>
    <value-serialization-service>
        <type>java.lang.Enum</type>
        <impl>org.eclipse.sapphire.modeling.serialization.internal.EnumSerializationService</impl>
    </value-serialization-service>
    <value-serialization-service>
        <type>java.lang.Boolean</type>
        <impl>org.eclipse.sapphire.modeling.serialization.internal.BooleanSerializationService</impl>
    </value-serialization-service>
    <value-serialization-service>
        <type>java.lang.Integer</type>
        <impl>org.eclipse.sapphire.modeling.serialization.internal.IntegerSerializationService</impl>
    </value-serialization-service>
    <value-serialization-service>
        <type>java.lang.Long</type>
        <impl>org.eclipse.sapphire.modeling.serialization.internal.LongSerializationService</impl>
    </value-serialization-service>
    <value-serialization-service>
        <type>java.lang.Float</type>
        <impl>org.eclipse.sapphire.modeling.serialization.internal.FloatSerializationService</impl>
    </value-serialization-service>
    <value-serialization-service>
        <type>java.lang.Double</type>
        <impl>org.eclipse.sapphire.modeling.serialization.internal.DoubleSerializationService</impl>
    </value-serialization-service>
    <value-serialization-service>
        <type>java.math.BigInteger</type>
        <impl>org.eclipse.sapphire.modeling.serialization.internal.BigIntegerSerializationService</impl>
    </value-serialization-service>
    <value-serialization-service>
        <type>java.math.BigDecimal</type>
        <impl>org.eclipse.sapphire.modeling.serialization.internal.BigDecimalSerializationService</impl>
    </value-serialization-service>
    <value-serialization-service>
        <type>java.net.URL</type>
        <impl>org.eclipse.sapphire.modeling.serialization.internal.UrlSerializationService</impl>
    </value-serialization-service>
    <value-serialization-service>
        <type>org.eclipse.core.runtime.IPath</type>
        <impl>org.eclipse.sapphire.modeling.serialization.internal.PathSerializationService</impl>
    </value-serialization-service>
    <value-serialization-service>
        <type>org.eclipse.sapphire.modeling.java.JavaTypeName</type>
        <impl>org.eclipse.sapphire.modeling.java.internal.JavaTypeNameSerializationService</impl>
    </value-serialization-service>
    <value-serialization-service>
        <type>org.eclipse.sapphire.modeling.java.JavaPackageName</type>
        <impl>org.eclipse.sapphire.modeling.java.internal.JavaPackageNameSerializationService</impl>
    </value-serialization-service>
    <value-serialization-service>
        <type>org.eclipse.sapphire.modeling.el.Function</type>
        <impl>org.eclipse.sapphire.modeling.el.internal.FunctionSerializationService</impl>
    </value-serialization-service>
    <function>
        <name>Concat</name>
        <impl>org.eclipse.sapphire.modeling.el.ConcatFunction</impl>
        <description>Concatenates two or more strings into a single string. Particularly useful in contexts where composite expressions cannot be used, such as where the result of concatenation needs to feed into another function or operator.</description>
    </function>
    <function>
        <name>FirstSegment</name>
        <impl>org.eclipse.sapphire.modeling.el.FirstSegmentFunction</impl>
        <description>Breaks a string into segments using the provided separators and returns the first segment. If no separators are found in the string, the entire string is returned. This function takes two string operands. The first is the string to tokenize. The second is a sequence of characters that individually should be treated as valid separators.</description>
    </function>
    <function>
        <name>LastSegment</name>
        <impl>org.eclipse.sapphire.modeling.el.LastSegmentFunction</impl>
        <description>Breaks a string into segments using the provided separators and returns the last segment. If no separators are found in the string, the entire string is returned. This function takes two string operands. The first is the string to tokenize. The second is a sequence of characters that individually should be treated as valid separators.</description>
    </function>
    <function>
        <name>Parent</name>
        <impl>org.eclipse.sapphire.modeling.el.ParentElementFunction</impl>
        <description>Returns the parent of the current model element.</description>
    </function>
    <function>
        <name>Root</name>
        <impl>org.eclipse.sapphire.modeling.el.RootElementFunction</impl>
        <description>Returns the root of the model.</description>
    </function>
</extension>
