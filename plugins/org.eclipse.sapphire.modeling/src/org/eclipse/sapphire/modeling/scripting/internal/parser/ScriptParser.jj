/******************************************************************************
 * Copyright (c) 2011 Oracle
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Konstantin Komissarchik - initial implementation and ongoing maintenance
 ******************************************************************************/

PARSER_BEGIN( ScriptParser )
    package org.eclipse.sapphire.modeling.scripting.internal.parser;
    
    import org.eclipse.sapphire.modeling.scripting.internal.ast.SyntaxTreeNode;
    import org.eclipse.sapphire.modeling.scripting.internal.ast.VariableOrLiteral;
    import org.eclipse.sapphire.modeling.scripting.internal.ast.EqualsOperator;
    import org.eclipse.sapphire.modeling.scripting.internal.ast.AndOperator;
    import org.eclipse.sapphire.modeling.scripting.internal.ast.OrOperator;
    
    public class ScriptParser
    {
    }
PARSER_END( ScriptParser )

SKIP : { " " }
TOKEN : { < VAR_OR_LITERAL : ( ["A"-"Z"] | ["a"-"z"] | ["0"-"9"] | "_" )+ > }
TOKEN : { < EQUALS : "==" > }
TOKEN : { < AND : "&&" > }
TOKEN : { < OR : "||" > }
TOKEN : { < OPEN_PAR : "(" > }
TOKEN : { < CLOSE_PAR : ")" > }

SyntaxTreeNode Start() :
{
    SyntaxTreeNode node = null;
}
{
    node = Expression()
    <EOF>
    { return node; }
}

SyntaxTreeNode Expression() :
{
    SyntaxTreeNode x = null;
    SyntaxTreeNode y = null;
}
{
    x = Term()
    (
        <AND>
        y = Term()
        { 
            x = new AndOperator( x, y );
            y = null; 
        }
    |
        <OR>
        y = Term()
        { 
            x = new OrOperator( x, y );
            y = null; 
        }
    )*
    {
        return x;
    }
}

SyntaxTreeNode Term() :
{
    SyntaxTreeNode node = null;
    Token x = null;
    Token y = null;
}
{
    x = <VAR_OR_LITERAL>
    (
        <EQUALS>
        y = <VAR_OR_LITERAL>
    )?
    {
        if( y == null )
        {
            return new VariableOrLiteral( x.image );
        }
        else
        {
            return new EqualsOperator( new VariableOrLiteral( x.image ), new VariableOrLiteral( y.image ) );
        }
    } 
|
    <OPEN_PAR> 
    node = Expression() 
    <CLOSE_PAR> 
    {
        return node;
    } 
}
