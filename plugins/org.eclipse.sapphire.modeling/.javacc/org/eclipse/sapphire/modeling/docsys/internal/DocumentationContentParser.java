/* Generated By:JavaCC: Do not edit this line. DocumentationContentParser.java */
package org.eclipse.sapphire.modeling.docsys.internal;

import org.eclipse.sapphire.modeling.docsys.*;

public class DocumentationContentParser implements DocumentationContentParserConstants {

  final public DocumentationContent Start() throws ParseException {
    DocumentationContent content = new DocumentationContent();
    DocumentationPart child = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
      case PBR:
      case UL_OPEN:
      case OL_OPEN:
      case BOLD_OPEN:
      case BOLD_CLOSE:
      case CODE_OPEN:
      case CODE_CLOSE:
      case CHARACTER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      child = Part();
            content.addChild( child );
    }
        {if (true) return content;}
    throw new Error("Missing return statement in function");
  }

  final public DocumentationPart Part() throws ParseException {
    DocumentationPart part = null;
    ListPart list = null;
    ListItem item = null;
    Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BR:
      jj_consume_token(BR);
            part = new LineBreakPart();
      break;
    case PBR:
      jj_consume_token(PBR);
            part = new ParagraphBreakPart();
      break;
    case BOLD_OPEN:
      jj_consume_token(BOLD_OPEN);
            part = new BoldPart( true );
      break;
    case BOLD_CLOSE:
      jj_consume_token(BOLD_CLOSE);
            part = new BoldPart( false );
      break;
    case CODE_OPEN:
      jj_consume_token(CODE_OPEN);
            part = new CodePart( true );
      break;
    case CODE_CLOSE:
      jj_consume_token(CODE_CLOSE);
            part = new CodePart( false );
      break;
    case UL_OPEN:
      jj_consume_token(UL_OPEN);
            list = new UnorderedListPart();
            part = list;
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LI_OPEN:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        item = ListItem();
                list.addItem( item );
      }
      jj_consume_token(UL_CLOSE);
      break;
    case OL_OPEN:
      jj_consume_token(OL_OPEN);
            list = new OrderedListPart();
            part = list;
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LI_OPEN:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        item = ListItem();
                list.addItem( item );
      }
      jj_consume_token(OL_CLOSE);
      break;
    case CHARACTER:
      part = Text();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return part;}
    throw new Error("Missing return statement in function");
  }

  final public ListItem ListItem() throws ParseException {
    ListItem item = null;
    DocumentationPart child = null;
    jj_consume_token(LI_OPEN);
        item = new ListItem();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
      case PBR:
      case UL_OPEN:
      case OL_OPEN:
      case BOLD_OPEN:
      case BOLD_CLOSE:
      case CODE_OPEN:
      case CODE_CLOSE:
      case CHARACTER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      child = Part();
            item.addChild( child );
    }
    jj_consume_token(LI_CLOSE);
        {if (true) return item;}
    throw new Error("Missing return statement in function");
  }

  final public TextPart Text() throws ParseException {
    StringBuilder buf = new StringBuilder();
    Token token = null;
    label_5:
    while (true) {
      token = jj_consume_token(CHARACTER);
            buf.append( token.image );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
    }
        {if (true) return new TextPart( buf.toString() );}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public DocumentationContentParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3ea6,0x8,0x8,0x3ea6,0x3ea6,0x2000,};
   }

  /** Constructor with InputStream. */
  public DocumentationContentParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DocumentationContentParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DocumentationContentParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DocumentationContentParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DocumentationContentParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DocumentationContentParser(DocumentationContentParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DocumentationContentParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
