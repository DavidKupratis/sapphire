/* Generated By:JavaCC: Do not edit this line. DocumentationContentParserTokenManager.java */
package org.eclipse.sapphire.modeling.docsys.internal;
import org.eclipse.sapphire.modeling.docsys.*;

/** Token Manager. */
public class DocumentationContentParserTokenManager implements DocumentationContentParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 91:
         return jjMoveStringLiteralDfa1_0(0x7feL);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x550L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x202L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(2, 9);
         break;
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x404L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xb0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      default :
         return 3;
   }
   return 3;
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L);
      case 93:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(3, 3);
         else if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(3, 5);
         else if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(3, 7);
         else if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(3, 10);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x140L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L);
      default :
         return 4;
   }
   return 4;
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L);
      case 93:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(4, 1);
         else if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(4, 4);
         else if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(4, 6);
         else if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(4, 8);
         break;
      default :
         return 5;
   }
   return 5;
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(5, 2);
         break;
      default :
         return 6;
   }
   return 6;
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\133\142\162\57\135", "\133\160\142\162\57\135", "\133\154\151\135", 
"\133\57\154\151\135", "\133\165\154\135", "\133\57\165\154\135", "\133\157\154\135", 
"\133\57\157\154\135", "\133\142\135", "\133\57\142\135", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[0];
private final int[] jjstateSet = new int[0];
protected char curChar;
/** Constructor. */
public DocumentationContentParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public DocumentationContentParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 0; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 11)
   {
      jjmatchedKind = 11;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
