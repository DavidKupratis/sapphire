/* Generated By:JavaCC: Do not edit this line. ExpressionLanguageParserImpl.java */
package org.eclipse.sapphire.modeling.el.parser.internal;

import java.util.*;
import java.math.*;
import org.eclipse.sapphire.modeling.el.*;

@SuppressWarnings( "all" )
public class ExpressionLanguageParserImpl implements ExpressionLanguageParserImplConstants {

/***********
 * GRAMMAR *
 ***********/
  final public Function Start() throws ParseException {
    Token t = null;
    List<Function> functions = new ArrayList<Function>();
    Function f = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NON_EXPRESSION_TEXT:
      case START_EXPRESSION:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NON_EXPRESSION_TEXT:
        t = jj_consume_token(NON_EXPRESSION_TEXT);
        break;
      case START_EXPRESSION:
        jj_consume_token(START_EXPRESSION);
        f = Expression();
        jj_consume_token(END_EXPRESSION);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            if( t != null )
            {
                f = Literal.create( t.image );
            }

            functions.add( f );

            t = null;
            f = null;
    }
        final int count = functions.size();

        if( count == 0 )
        {
            {if (true) return null;}
        }
        else if( count == 1 )
        {
            {if (true) return functions.get( 0 );}
        }
        else
        {
            {if (true) return ConcatFunction.create( functions );}
        }
    throw new Error("Missing return statement in function");
  }

  final public Function Expression() throws ParseException {
    Function res = null;
    res = ConditionalExpression();
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Function ConditionalExpression() throws ParseException {
    Function res = null;
    Function x = null;
    Function y = null;
    res = OrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTION_MARK:
      jj_consume_token(QUESTION_MARK);
      x = OrExpression();
      jj_consume_token(COLON);
      y = OrExpression();
            res = ConditionalFunction.create( res, x, y );
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Function OrExpression() throws ParseException {
    Function res = null;
    Function f = null;
    res = AndExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
      f = AndExpression();
            res = OrFunction.create( res, f );
    }
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Function AndExpression() throws ParseException {
    Function res = null;
    Function f = null;
    res = EqualityExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(AND);
      f = EqualityExpression();
            res = AndFunction.create( res, f );
    }
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Function EqualityExpression() throws ParseException {
    Function res;
    Function f;
    int ftype;
    res = RelationalExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
      case IN:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
                    ftype = 1;
        break;
      case NE:
        jj_consume_token(NE);
                    ftype = 2;
        break;
      case IN:
        jj_consume_token(IN);
                    ftype = 3;
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f = RelationalExpression();
            if( ftype == 3 )
            {
                res = InFunction.create( res, f );
            }
            else
            {
                res = EqualityFunction.create( res, f );

                if( ftype == 2 )
                {
                    res = NotFunction.create( res );
                }
            }
    }
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Function RelationalExpression() throws ParseException {
    Function res;
    Function f;
    int op;
    res = AddExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
                    op = 1;
        break;
      case GT:
        jj_consume_token(GT);
                    op = 2;
        break;
      case GE:
        jj_consume_token(GE);
                    op = 3;
        break;
      case LE:
        jj_consume_token(LE);
                    op = 4;
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f = AddExpression();
            switch( op )
            {
                case 1:
                {
                    res = LessThanFunction.create( res, f );
                    break;
                }
                case 2:
                {
                    res = GreaterThanFunction.create( res, f );
                    break;
                }
                case 3:
                {
                    res = GreaterThanOrEqualFunction.create( res, f );
                    break;
                }
                case 4:
                {
                    res = LessThanOrEqualFunction.create( res, f );
                    break;
                }
                default:
                {
                    {if (true) throw new IllegalStateException();}
                }
            }
    }
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Function AddExpression() throws ParseException {
    Function res;
    Function f;
    int op;
    res = MultiplyExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                       op = 1;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                       op = 2;
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f = MultiplyExpression();
            switch( op )
            {
                case 1:
                {
                    res = AddFunction.create( res, f );
                    break;
                }
                case 2:
                {
                    res = SubtractFunction.create( res, f );
                    break;
                }
                default:
                {
                    {if (true) throw new IllegalStateException();}
                }
            }
    }
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Function MultiplyExpression() throws ParseException {
    Function res;
    Function f;
    int op;
    res = UnaryExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case MODULUS:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
                          op = 1;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
                          op = 2;
        break;
      case MODULUS:
        jj_consume_token(MODULUS);
                          op = 3;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f = UnaryExpression();
            switch( op )
            {
                case 1:
                {
                    res = MultiplyFunction.create( res, f );
                    break;
                }
                case 2:
                {
                    res = DivideFunction.create( res, f );
                    break;
                }
                case 3:
                {
                    res = ModuloFunction.create( res, f );
                    break;
                }
                default:
                {
                    {if (true) throw new IllegalStateException();}
                }
            }
    }
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Function UnaryExpression() throws ParseException {
    Function res;
    List<Integer> ops = new ArrayList<Integer>();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case NOT:
      case EMPTY:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
                   ops.add( 1 );
        break;
      case MINUS:
        jj_consume_token(MINUS);
                   ops.add( 2 );
        break;
      case EMPTY:
        jj_consume_token(EMPTY);
                   ops.add( 3 );
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    res = Value();
        for( int i = ops.size() - 1; i >= 0; i-- )
        {
            final int op = ops.get( i );

            switch( op )
            {
                case 1:
                {
                    res = NotFunction.create( res );
                    break;
                }
                case 2:
                {
                    res = UnaryMinusFunction.create( res );
                    break;
                }
                case 3:
                {
                    res = EmptyFunction.create( res );
                    break;
                }
                default:
                {
                    {if (true) throw new IllegalStateException();}
                }
            }
        }

        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Function Value() throws ParseException {
    Function res;
    Function f;
    String str;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
    case NULL:
      res = Literal();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      res = Expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_1(2147483647)) {
        res = FunctionInvocation(null);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          str = Identifier();
            res = PropertyAccessFunction.create( str );
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        if (jj_2_2(2147483647)) {
          res = FunctionInvocation(res);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            str = Identifier();
                    res = PropertyAccessFunction.create( res, Literal.create( str ) );
            break;
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        f = Expression();
        jj_consume_token(RBRACKET);
                res = PropertyAccessFunction.create( res, f );
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Function FunctionInvocation(Function context) throws ParseException {
    String name;
    Function f;

    List<Function> operands = new ArrayList<Function>();

    if( context != null )
    {
        operands.add( context );
    }
    name = QualifiedName();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
    case NULL:
    case LPAREN:
    case MINUS:
    case NOT:
    case EMPTY:
    case IDENTIFIER:
      f = Expression();
                               operands.add( f );
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        f = Expression();
                                   operands.add( f );
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
        {if (true) return DeferredFunction.create( name, operands );}
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
    Token t;
    Literal res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
                                  res = Literal.create( null );
      break;
    case TRUE:
      jj_consume_token(TRUE);
                                  res = Literal.create( Boolean.TRUE );
      break;
    case FALSE:
      jj_consume_token(FALSE);
                                  res = Literal.create( Boolean.FALSE );
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                                  res = Literal.create( new BigInteger( t.image ) );
      break;
    case DECIMAL_LITERAL:
      t = jj_consume_token(DECIMAL_LITERAL);
                                  res = Literal.create( new BigDecimal( t.image ) );
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                                  res = Literal.create( StringLiteral.fromToken( t.image ) );
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String QualifiedName() throws ParseException {
    String ns = null;
    String local = null;
    if (jj_2_3(2147483647)) {
      ns = Identifier();
      jj_consume_token(COLON);
    } else {
      ;
    }
    local = Identifier();
        if( ns == null )
        {
            {if (true) return local;}
        }
        else
        {
            {if (true) return ns + ":" + local;}
        }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ExpressionLanguageParserImplTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6,0x6,0x8000000,0x0,0x0,0x640000,0x640000,0x1b0000,0x1b0000,0xc0000000,0xc0000000,0x0,0x0,0x80000000,0x80000000,0x803d80,0x0,0x10008000,0x0,0x10008000,0x2000000,0x80803d80,0x3d80,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x20,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x7,0x48,0x48,0x0,0x80,0x0,0x80,0x0,0x0,0xc8,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ExpressionLanguageParserImpl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExpressionLanguageParserImpl(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionLanguageParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ExpressionLanguageParserImpl(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionLanguageParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ExpressionLanguageParserImpl(ExpressionLanguageParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ExpressionLanguageParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
