/* Generated By:JavaCC: Do not edit this line. ExpressionLanguageParserImplConstants.java */
package org.eclipse.sapphire.modeling.el.parser.internal;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ExpressionLanguageParserImplConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NON_EXPRESSION_TEXT = 1;
  /** RegularExpression Id. */
  int START_EXPRESSION = 2;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 8;
  /** RegularExpression Id. */
  int EXPONENT = 9;
  /** RegularExpression Id. */
  int STRING_LITERAL = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int FALSE = 12;
  /** RegularExpression Id. */
  int NULL = 13;
  /** RegularExpression Id. */
  int END_EXPRESSION = 14;
  /** RegularExpression Id. */
  int DOT = 15;
  /** RegularExpression Id. */
  int GT = 16;
  /** RegularExpression Id. */
  int LT = 17;
  /** RegularExpression Id. */
  int EQ = 18;
  /** RegularExpression Id. */
  int LE = 19;
  /** RegularExpression Id. */
  int GE = 20;
  /** RegularExpression Id. */
  int NE = 21;
  /** RegularExpression Id. */
  int IN = 22;
  /** RegularExpression Id. */
  int LPAREN = 23;
  /** RegularExpression Id. */
  int RPAREN = 24;
  /** RegularExpression Id. */
  int COMMA = 25;
  /** RegularExpression Id. */
  int COLON = 26;
  /** RegularExpression Id. */
  int QUESTION_MARK = 27;
  /** RegularExpression Id. */
  int LBRACKET = 28;
  /** RegularExpression Id. */
  int RBRACKET = 29;
  /** RegularExpression Id. */
  int PLUS = 30;
  /** RegularExpression Id. */
  int MINUS = 31;
  /** RegularExpression Id. */
  int MULTIPLY = 32;
  /** RegularExpression Id. */
  int DIVIDE = 33;
  /** RegularExpression Id. */
  int MODULUS = 34;
  /** RegularExpression Id. */
  int NOT = 35;
  /** RegularExpression Id. */
  int AND = 36;
  /** RegularExpression Id. */
  int OR = 37;
  /** RegularExpression Id. */
  int EMPTY = 38;
  /** RegularExpression Id. */
  int IDENTIFIER = 39;
  /** RegularExpression Id. */
  int LETTER = 40;
  /** RegularExpression Id. */
  int DIGIT = 41;
  /** RegularExpression Id. */
  int ILLEGAL_CHARACTER = 42;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_EXPRESSION = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<NON_EXPRESSION_TEXT>",
    "\"${\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"}\"",
    "\".\"",
    "<GT>",
    "<LT>",
    "<EQ>",
    "<LE>",
    "<GE>",
    "<NE>",
    "<IN>",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\":\"",
    "\"?\"",
    "\"[\"",
    "\"]\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "<DIVIDE>",
    "<MODULUS>",
    "<NOT>",
    "<AND>",
    "<OR>",
    "<EMPTY>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<ILLEGAL_CHARACTER>",
  };

}
