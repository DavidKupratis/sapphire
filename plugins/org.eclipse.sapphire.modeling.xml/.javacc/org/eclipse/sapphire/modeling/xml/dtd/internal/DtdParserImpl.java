/* Generated By:JavaCC: Do not edit this line. DtdParserImpl.java */
package org.eclipse.sapphire.modeling.xml.dtd.internal;

import java.util.*;
import org.eclipse.sapphire.modeling.xml.schema.*;

@SuppressWarnings( "all" )
public class DtdParserImpl implements DtdParserImplConstants {
    public final XmlDocumentSchema.Factory schema = new XmlDocumentSchema.Factory();
    public final Map<String,String> entities = new HashMap<String,String>();

/***********
 * GRAMMAR *
 ***********/
  final public void Start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
      case 33:
      case 34:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        ElementDefinition();
        break;
      case 33:
        AttributeListDefinition();
        break;
      case 34:
        EntityDefinition();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  final public void ElementDefinition() throws ParseException {
    Token n;
    XmlContentModel.Factory c;
    jj_consume_token(24);
    n = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMPTY:
      jj_consume_token(EMPTY);
      break;
    case ANY:
      jj_consume_token(ANY);
      break;
    case PCDATA:
    case NAME:
    case ENTITY_REF:
    case 26:
      c = ContentModel();
            if( c != null )
            {
                this.schema.addContentModel( n.image, c );

                final XmlElementDefinition.Factory f = new XmlElementDefinition.Factory();
                f.setName( n.image );
                f.setContentModelName( n.image );

                this.schema.addTopLevelElement( f );
            }
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(25);
  }

  final public XmlContentModel.Factory ContentModel() throws ParseException {
    Token n;
    XmlContentModel.Factory c;
    XmlContentModel.Factory d;
    XmlGroupContentModel.Factory g = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      n = jj_consume_token(NAME);
         {
            final XmlElementDefinitionByReference.Factory f = new XmlElementDefinitionByReference.Factory();
            f.setName( n.image );
            c = f;
        }
      break;
    case PCDATA:
      jj_consume_token(PCDATA);
            c = null;
      break;
    case ENTITY_REF:
      jj_consume_token(ENTITY_REF);
            c = null;
      break;
    case 26:
      jj_consume_token(26);
      c = ContentModel();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
      case 28:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 27:
          label_2:
          while (true) {
            jj_consume_token(27);
            d = ContentModel();
                    if( g == null )
                    {
                        g = new XmlChoiceGroup.Factory();
                        g.addNestedContent( c );
                        c = g;
                    }

                    g.addNestedContent( d );
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 27:
              ;
              break;
            default:
              jj_la1[3] = jj_gen;
              break label_2;
            }
          }
          break;
        case 28:
          label_3:
          while (true) {
            jj_consume_token(28);
            d = ContentModel();
                 {
                    if( g == null )
                    {
                        g = new XmlSequenceGroup.Factory();
                        g.addNestedContent( c );
                        c = g;
                    }

                    g.addNestedContent( d );
                }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 28:
              ;
              break;
            default:
              jj_la1[4] = jj_gen;
              break label_3;
            }
          }
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(29);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
    case 31:
    case 32:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        jj_consume_token(30);
            if( c != null )
            {
                c.setMinOccur( 0 );
                c.setMaxOccur( -1 );
            }
        break;
      case 31:
        jj_consume_token(31);
            if( c != null )
            {
                c.setMinOccur( 1 );
                c.setMaxOccur( -1 );
            }
        break;
      case 32:
        jj_consume_token(32);
            if( c != null )
            {
                c.setMinOccur( 0 );
                c.setMaxOccur( 1 );
            }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public void AttributeListDefinition() throws ParseException {
    jj_consume_token(33);
    jj_consume_token(NAME);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CDATA:
        jj_consume_token(CDATA);
        break;
      case ID:
        jj_consume_token(ID);
        break;
      case IDREF:
        jj_consume_token(IDREF);
        break;
      case IDREFS:
        jj_consume_token(IDREFS);
        break;
      case ENTITY:
        jj_consume_token(ENTITY);
        break;
      case ENTITIES:
        jj_consume_token(ENTITIES);
        break;
      case NMTOKEN:
        jj_consume_token(NMTOKEN);
        break;
      case NMTOKENS:
        jj_consume_token(NMTOKENS);
        break;
      case NOTATION:
        jj_consume_token(NOTATION);
        jj_consume_token(26);
        jj_consume_token(NAME);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 27:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_5;
          }
          jj_consume_token(27);
          jj_consume_token(NAME);
        }
        jj_consume_token(29);
        break;
      case 26:
        jj_consume_token(26);
        jj_consume_token(NAME);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 27:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_6;
          }
          jj_consume_token(27);
          jj_consume_token(NAME);
        }
        jj_consume_token(29);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REQUIRED:
        jj_consume_token(REQUIRED);
        break;
      case IMPLIED:
        jj_consume_token(IMPLIED);
        break;
      case FIXED:
      case QUOTEDSTR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FIXED:
          jj_consume_token(FIXED);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(QUOTEDSTR);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(25);
  }

  final public void EntityDefinition() throws ParseException {
    Token n, v;
    jj_consume_token(34);
    jj_consume_token(35);
    n = jj_consume_token(NAME);
    v = jj_consume_token(QUOTEDSTR);
    jj_consume_token(25);
        final int length = v.image.length();

        if( length > 2 )
        {
            final String value = v.image.substring( 1, length - 1 );
            this.entities.put( n.image, value );
        }
  }

  /** Generated Token Manager. */
  public DtdParserImplTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000000,0x1000000,0x40c0320,0x8000000,0x10000000,0x18000000,0x18000000,0x40c0020,0xc0000000,0xc0000000,0x40000,0x8000000,0x8000000,0x403fc80,0x8,0x100058,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x6,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public DtdParserImpl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DtdParserImpl(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DtdParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DtdParserImpl(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DtdParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DtdParserImpl(DtdParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DtdParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[36];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
